#!/bin/bash

# Usage: source dws-attach {attach|detach} [remote_host]
# Defaults to local docker if no remote host is provided
# Remote host should be configured in ~/.ssh/config
# If you change from local to remote, the remote container will continue running (and vice-versa)

is_running () {
    docker-compose -H=$DOCKER_HOST exec $docker_service_name echo 'Container still running!' &>/dev/null
}

attach_container () {
    echo 'Attaching to container...'
    docker-compose -H=$DOCKER_HOST exec $docker_service_name /bin/bash
}

start_container () {
    echo 'Starting container...'
    docker-compose -H=$DOCKER_HOST down
    docker-compose -H=$DOCKER_HOST up --detach $up_build_arg
}

start_sync () {
    # Get container from docker-compose
    cur_container=$(docker-compose -H=$DOCKER_HOST ps -q $docker_service_name)
    if [ -z "$cur_container" ]; then
        echo "ERROR: Tried starting a file sync but could not find running container."
        return 1
    fi
    # Parsing current container id from mutagen.yml
    prev_mutagen_container=$(yq d mutagen.yml sync.defaults | yq r - "sync.*.*" | grep docker:// | yq r - "[0]" | awk -F"//" '{print $2}' | awk -F"/" '{print $1}')
    # Writing new container id to mutagen.yml. Note: this replaces all occurences of previous container id
    if [ -z "$prev_mutagen_container" ]; then
        echo "ERROR: mutagen.yml file docker:// definition invalid. Must at least have placeholder for container id."
        return 1
    fi

    sed -i '' "s/$prev_mutagen_container/$cur_container/g" mutagen.yml  # be careful... not sanitizing input
    mutagen project start
}

stop_sync () {
    mutagen project terminate &>/dev/null
}

attach_with_sync () {
    if is_running ; then
        start_sync && attach_container
    else
        start_container && start_sync && attach_container
    fi
}

kill_tunnel () {
    # kill the socket-forwarding process if active
    [ -f "$ssh_pidfile" ] && (kill -9 $(cat $ssh_pidfile); rm $ssh_pidfile)
    # remove local socket file if exists
    [ -S "$local_sock" ] && rm $local_sock
    # remove dws files root if exists
    [ -d "$files_root" ] && rmdir $files_root
    unset DOCKER_HOST
}

tunnel_remote () {
    # docker-compose doesn't support ~/.ssh/config, so we tunnel to the socket ourselves
    files_root=$PWD/.dws
    mkdir -p $files_root
    ssh_pidfile=$files_root/ssh.pid
    local_sock=$files_root/docker.sock

    # start docker daemon on remote host. TODO: allow external configuration. shm-size is for nvidia specifically...
    ssh $remote_host 'sudo usermod -aG docker $USER && sudo dockerd --default-shm-size=1G --storage-driver=overlay2 &' &>/dev/null

    # forward the docker daemon's unix socket and point local to it
    ssh -nNT -L $local_sock:/var/run/docker.sock $remote_host &
    echo $! > $ssh_pidfile
    while [ ! -S "$local_sock" ]; do sleep 0.1; done  # Wait for socket to be created
    export DOCKER_HOST=unix://$local_sock
}

connect () {
    detach
    # Attaching
    if ! [ -z "$remote_host" ]; then
        echo "Connecting to remote docker daemon on $remote_host..."
        tunnel_remote
    else
        echo "Connecting to local Docker daemon..."
        unset DOCKER_HOST
    fi
}

detach() {
    echo 'Detaching from previous docker workspace...'
    stop_sync
    kill_tunnel
}

stop() {
    echo 'Stopping docker workspace...'
    stop_sync
    docker-compose -H=$DOCKER_HOST down
}

attach_main() {
    connect
    attach_with_sync; detach  # auto detach after closing terminal
}

stop_main() {
    connect
    stop
    kill_tunnel
}

rebuild_main() {
    up_build_arg="--build"
    connect
    stop
    attach_with_sync; detach 
}

# Main

if [ $# -lt 1 ]; then
    echo 'Usage: '
    echo '  dws attach [ssh_host]'
    echo "  > Attaches terminal to running container, starting a new one if it doesn't exist."
    echo '  dws stop [ssh_host]'
    echo "  > Stops the associated container if it's running."
    echo '  dws rebuild [ssh_host]'
    echo "  > Forces docker to rebuild the image, then starts a container and attaches to it."
    echo '  dws detach'
    echo "  > Cleanly detaches from the previous workspace. Good for resetting state when an attach command is interrupted."
    echo '  dws connect [ssh_host]'
    echo "  > Connects to the remote host's docker daemon if provided, otherwise connects to the local daemon. Does not attach to container. Allows use of docker CLI to control remote host."
    return 128
fi

docker-compose config >/dev/null
if [ ! "$?" = 0 ]; then return 1; fi

remote_host=; [ -z "$2" ] || remote_host=$2
docker_service_name=$(grep -A3 'services:' docker-compose.yml | head -2 | tail -1 | cut -d : -f 1 | awk '{print $1}')
up_build_arg=''

if [ "$1" = "attach" ]; then
    attach_main
elif [ "$1" = "stop" ]; then
    stop_main
elif [ "$1" = "rebuild" ]; then
    rebuild_main
elif [ "$1" = "detach" ]; then
    detach
elif [ "$1" = "connect" ]; then
    connect
else
    echo "ERROR: Invalid option: $1"
fi